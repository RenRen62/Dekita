name: CI/CD for Terraform
on:
  push:
    branches:
      - 'main'
      - 'staging'
      - 'production'
    paths:
      - 'terraform/**'
      - 'apps/lambda/**'
  pull_request:
    types:
      - 'labeled'
    branches:
      - 'main'
      - 'staging'
      - 'production'
    paths:
      - 'terraform/**'
      - 'apps/lambda/**'
jobs:
  terraform:
    name: Execute Test
    if: ${{ (! failure() || github.event.action == 'labeled' && github.event.label.name == 'tested') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup Environment
        uses: ./.github/actions/setup-env
        with:
          token: ${{ secrets.NPM_TOKEN }}
          package: '@dekita/lambda'

      - name: Set env to dev
        if: ${{ github.base_ref == 'main' || github.ref == 'refs/heads/main' }}
        run: |
          echo "TERRAFORM_DIR=./terraform/envs/dev" >> $GITHUB_ENV

      - name: Set env to prd
        if: ${{ github.base_ref == 'production' || github.ref == 'refs/heads/production' }}
        run: |
          echo "TERRAFORM_DIR=./terraform/envs/prd" >> $GITHUB_ENV

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: terraform setup
        uses: hashicorp/setup-terraform@v3

      - name: setup tfcmt
        if: ${{ github.event_name == 'pull_request' }}
        env:
          TFCMT_VERSION: v3.4.1
        run: |
          wget "https://github.com/suzuki-shunsuke/tfcmt/releases/download/${TFCMT_VERSION}/tfcmt_linux_amd64.tar.gz" -O /tmp/tfcmt.tar.gz
          tar xzf /tmp/tfcmt.tar.gz -C /tmp
          mv /tmp/tfcmt /usr/local/bin
          tfcmt --version

      - name: Set up lambda function
        run: |
          pnpm --filter @dekita/lambda prisma:generate
          pnpm --filter @dekita/lambda tsc
          sh ./apps/lambda/layer_setup.sh
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: terraform init
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform init

      - name: terraform plan
        if: ${{ github.event_name == 'pull_request' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          tfcmt plan -patch -- terraform plan -no-color -input=false

      - name: terraform apply
        id: apply
        timeout-minutes: 15
        if: ${{ github.event_name == 'push' }}
        run: |
          cd ${{ env.TERRAFORM_DIR }}
          terraform apply -auto-approve
